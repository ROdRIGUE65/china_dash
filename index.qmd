---
title: "Influenza A H7N9 in China, 2013"
format: dashboard
theme: lux
---

```{r}
# Load packages 
if(!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse, outbreaks, bslib, bsicons, shiny, 
               rgeoboundaries, plotly, htmltools, reactable,   
               gapminder)

```

```{r}
# Calculate Key Metrics

## **Total Number of Cases**: Count all the rows in the dataset

total_cases<- nrow(fluH7N9_china_2013)


## **Total Deaths**: Count the number of deaths. Consider the outcome variable for this.

total_deaths<- fluH7N9_china_2013 %>% 
filter(outcome == "Death")%>%
  nrow()

## **Total Hospitalizations**: Count the number of hospitalizations.   

total_hospitalizations<- fluH7N9_china_2013 %>% 
filter(!is.na(date_of_hospitalisation))%>%
  nrow()

```

```{r}
province_summary <- fluH7N9_china_2013 %>%
  group_by(province) %>%
  summarise(total_cases = n(), .groups = 'drop')  # groups are dropped after summarise

# Reordering provinces based on total_cases
province_plot <- ggplot(data= province_summary,
                        mapping = aes(x= total_cases,
                                      y= reorder(province, total_cases))) +
  geom_col(fill= "steelblue")

```

```{r results='hide', message=FALSE, warning = FALSE}
### MAP OF CASES PER PROVINCE
province_summary <- fluH7N9_china_2013 %>% 
  group_by(province) %>% 
  summarise(total_cases = n()) 

china_map <- rgeoboundaries::gb_adm1("china")

# Check the keys to see if join will be successful
setdiff(province_summary$province, china_map$shapeName)
setdiff(china_map$shapeName, province_summary$province)
# Some work to be done to harmonize these

china_map <- china_map %>%
  # Remove the strings Province, Municipality and Autonomous Region 
  # to allow matching
  mutate(province = str_trim(
    str_remove(shapeName, "Province|Municipality|Autonomous Region")
  ))

# Check if join will work fine
setdiff(province_summary$province, china_map$province)

# Fix Guangdong, which based on a quick Google is actually Guangzhou
china_map <- china_map %>% 
  mutate(province = if_else(province == "Guangzhou", "Guangdong", province)) 
  
# Check again
setdiff(province_summary$province, china_map$province)

# Now join
china_map_joined <- 
  left_join(china_map, province_summary, by = "province") %>% 
  # Create tooltip label 
  mutate(tooltip_label = paste0(province, ": ", total_cases))

china_map_plot <- ggplot(china_map_joined) +
  geom_sf(aes(fill = total_cases, text = tooltip_label)) + 
  theme_void() +
  labs(fill = "Number of Cases") + 
  theme(legend.position = "none")

china_map_plot_ggplotly <- 
  ggplotly(china_map_plot, tooltip = "text")
```

# HOME

## Row 1 {height="25%)"}

```{r}
value_box(
  title = "Total cases",
  value = total_cases,
  showcase = bsicons::bs_icon("virus"),
  theme = value_box_theme(bg = "#518fd6")
  )
```

```{r}
value_box(
  title = "Total deaths",
  value = total_deaths,
  showcase = bsicons::bs_icon("file-medical"),
  theme = value_box_theme(bg = "#214773")
  )
```

```{r}
value_box(
  title = "Total hospitalizationss",
  value = total_hospitalizations,
  showcase = bsicons::bs_icon("hospital"),
  theme = value_box_theme(bg = "#3f71ab")
  )
```

## Row 2 {height="75%)"}

###  {width="30%"}

```{r}
# Plot of Case Counts
ggplotly(province_plot)

```

###  {width="70%"}

```{r}
china_map_plot_ggplotly
```

# DOWNLOAD DATA

```{r}
htmltools::browsable(
  tagList(
    reactable(fluH7N9_china_2013, 
              elementId = "china-table", 
              searchable = T, 
              filterable = T), 
    
tags$button("Download as CSV", 
            onclick = "Reactable.downloadDataCSV('china-table')")
  )
)
```
